// <auto-generated />
using System;
using DATSANBONG.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATSANBONG.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250703074931_RenameIdentityTables")]
    partial class RenameIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATSANBONG.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("NGUOIDUNG", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.ChiTietDonDatSan", b =>
                {
                    b.Property<string>("MaDatSan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSanCon")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSanBong")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeSpan>("GioBatDau")
                        .HasColumnType("time");

                    b.Property<string>("ChiTietSanBongMaSanBong")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ChiTietSanBongMaSanCon")
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeSpan>("GioKetThuc")
                        .HasColumnType("time");

                    b.Property<string>("thu")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaDatSan", "MaSanCon", "MaSanBong", "GioBatDau");

                    b.HasIndex("ChiTietSanBongMaSanBong", "ChiTietSanBongMaSanCon");

                    b.HasIndex("MaSanBong", "MaSanCon");

                    b.ToTable("CHITIETDONDATSAN", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.ChiTietSanBong", b =>
                {
                    b.Property<string>("MaSanBong")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSanCon")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LoaiSanCon")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TenSanCon")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TrangThaiSan")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MaSanBong", "MaSanCon");

                    b.ToTable("CHITIETSANBONG", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.DanhGia", b =>
                {
                    b.Property<string>("MaDanhGia")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BinhLuan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaNguoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaSanBong")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayDanhGia")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoSao")
                        .HasColumnType("int");

                    b.HasKey("MaDanhGia");

                    b.HasIndex("MaNguoiDung");

                    b.HasIndex("MaSanBong");

                    b.ToTable("DANHGIA", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.DonDatSan", b =>
                {
                    b.Property<string>("MaDatSan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKhachHang")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaNhanVien")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NgayDat")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhuongThucTT")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SoLuongSan")
                        .HasColumnType("int");

                    b.Property<decimal>("TongTien")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TrangThaiTT")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaDatSan");

                    b.HasIndex("MaKhachHang");

                    b.HasIndex("MaNhanVien");

                    b.ToTable("DONDATSAN", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.HinhAnh", b =>
                {
                    b.Property<string>("maHinhAnh")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("maSanBong")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("urlHinhAnh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("maHinhAnh");

                    b.HasIndex("maSanBong");

                    b.ToTable("HINHANH", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.LichSan", b =>
                {
                    b.Property<string>("MaLichSan")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChiTietSanBongMaSanBong")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ChiTietSanBongMaSanCon")
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("GiaThue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan>("GioBatDau")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("GioKetThuc")
                        .HasColumnType("time");

                    b.Property<string>("MaSanBong")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSanCon")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SanBongMaSanBong")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaLichSan");

                    b.HasIndex("SanBongMaSanBong");

                    b.HasIndex("ChiTietSanBongMaSanBong", "ChiTietSanBongMaSanCon");

                    b.HasIndex("MaSanBong", "MaSanCon");

                    b.ToTable("LICHSAN", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.NhanVien", b =>
                {
                    b.Property<string>("MaNhanVien")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaChuSan")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaSanBong")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaNhanVien");

                    b.HasIndex("MaChuSan");

                    b.HasIndex("MaSanBong");

                    b.ToTable("NHANVIEN", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.SanBong", b =>
                {
                    b.Property<string>("MaSanBong")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaChuSan")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgayDangKy")
                        .HasColumnType("datetime2");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SoLuongSan")
                        .HasColumnType("int");

                    b.Property<string>("TenSanBong")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MaSanBong");

                    b.HasIndex("MaChuSan");

                    b.ToTable("SANBONG", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("VAITRO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("VAITRONGUOIDUNG", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DATSANBONG.Models.ChiTietDonDatSan", b =>
                {
                    b.HasOne("DATSANBONG.Models.DonDatSan", "DonDatSan")
                        .WithMany("ChiTietDonDatSans")
                        .HasForeignKey("MaDatSan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.ChiTietSanBong", null)
                        .WithMany("ChiTietDonDatSans")
                        .HasForeignKey("ChiTietSanBongMaSanBong", "ChiTietSanBongMaSanCon");

                    b.HasOne("DATSANBONG.Models.ChiTietSanBong", "ChiTietSanBong")
                        .WithMany()
                        .HasForeignKey("MaSanBong", "MaSanCon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiTietSanBong");

                    b.Navigation("DonDatSan");
                });

            modelBuilder.Entity("DATSANBONG.Models.ChiTietSanBong", b =>
                {
                    b.HasOne("DATSANBONG.Models.SanBong", "SanBong")
                        .WithMany("DanhSachChiTietSan")
                        .HasForeignKey("MaSanBong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanBong");
                });

            modelBuilder.Entity("DATSANBONG.Models.DanhGia", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", "NguoiDung")
                        .WithMany()
                        .HasForeignKey("MaNguoiDung")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.SanBong", "SanBong")
                        .WithMany("DanhGias")
                        .HasForeignKey("MaSanBong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NguoiDung");

                    b.Navigation("SanBong");
                });

            modelBuilder.Entity("DATSANBONG.Models.DonDatSan", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKhachHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.NhanVien", "NhanVien")
                        .WithMany()
                        .HasForeignKey("MaNhanVien")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("DATSANBONG.Models.HinhAnh", b =>
                {
                    b.HasOne("DATSANBONG.Models.SanBong", "SanBong")
                        .WithMany("HinhAnhs")
                        .HasForeignKey("maSanBong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanBong");
                });

            modelBuilder.Entity("DATSANBONG.Models.LichSan", b =>
                {
                    b.HasOne("DATSANBONG.Models.SanBong", "SanBong")
                        .WithMany()
                        .HasForeignKey("MaSanBong")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.SanBong", null)
                        .WithMany("DanhSachLichSan")
                        .HasForeignKey("SanBongMaSanBong");

                    b.HasOne("DATSANBONG.Models.ChiTietSanBong", null)
                        .WithMany("LichSans")
                        .HasForeignKey("ChiTietSanBongMaSanBong", "ChiTietSanBongMaSanCon");

                    b.HasOne("DATSANBONG.Models.ChiTietSanBong", "ChiTietSanBong")
                        .WithMany()
                        .HasForeignKey("MaSanBong", "MaSanCon")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChiTietSanBong");

                    b.Navigation("SanBong");
                });

            modelBuilder.Entity("DATSANBONG.Models.NhanVien", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", "ChuSan")
                        .WithMany()
                        .HasForeignKey("MaChuSan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.ApplicationUser", "NhanVienUser")
                        .WithMany()
                        .HasForeignKey("MaNhanVien")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.SanBong", "SanBong")
                        .WithMany("DanhSachNhanVien")
                        .HasForeignKey("MaSanBong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuSan");

                    b.Navigation("NhanVienUser");

                    b.Navigation("SanBong");
                });

            modelBuilder.Entity("DATSANBONG.Models.SanBong", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", "ChuSan")
                        .WithMany()
                        .HasForeignKey("MaChuSan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuSan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATSANBONG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DATSANBONG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DATSANBONG.Models.ChiTietSanBong", b =>
                {
                    b.Navigation("ChiTietDonDatSans");

                    b.Navigation("LichSans");
                });

            modelBuilder.Entity("DATSANBONG.Models.DonDatSan", b =>
                {
                    b.Navigation("ChiTietDonDatSans");
                });

            modelBuilder.Entity("DATSANBONG.Models.SanBong", b =>
                {
                    b.Navigation("DanhGias");

                    b.Navigation("DanhSachChiTietSan");

                    b.Navigation("DanhSachLichSan");

                    b.Navigation("DanhSachNhanVien");

                    b.Navigation("HinhAnhs");
                });
#pragma warning restore 612, 618
        }
    }
}
